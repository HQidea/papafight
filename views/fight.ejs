<!DOCTYPE html>
<html>
  <head>
    <title>啪啪快打</title>
    <link rel='stylesheet' href='/stylesheets/fight.css' />
    <% include inc/meta.ejs %>
    <link href="http://style.c.aliimg.com/fdevlib/css/lofty/port/lofty.css" rel="stylesheet"></link> 
    <script src="/javascripts/lib/hilo-standalone.js"></script>
    <script src="http://style.c.aliimg.com/fdevlib/js/lofty/port/lofty.js"></script>
    <script src="/javascripts/fight.js"></script>
    <style>
    html, body{
        width: 100%;
        height: 100%;
        background: #000;
    }
    #game-container{
        position: relative;
        width: 100%;
        top: 0;
        bottom: 0;
    }
    .hilo-log{
        bottom: 0;
        top: auto !important;
        max-height: 76px !important;
    }
    .blood-box-me,.blood-box-rival {
        position: absolute;
        width: 417px;height: 25px;
        /*background-size: 60% 100%;*/
        overflow: hidden;
        border-radius: 13px;
    }
    .blood-box-me img,.blood-box-rival img {
        position: absolute;left: 4px;top: 6px;
        transition: all .2s linear;
        /*width: 59%;*/
        /*height: 100%;*/
        z-index: 1;
    }
    .blood-box-me .blood-box,.blood-box-rival .blood-box {
        position: absolute;left: -4px;top: 0;
        height:100%;width: 100%;
        background: url('/images/blood-box.png') 0 0 no-repeat;
        z-index: 10;
    }
    .blood-box-me {
        /*transform-origin: 0 50%;*/
        left: 60px;top: 20px;
        /*transform:rotate(-90deg) translateX(-100%);*/
    }
    .blood-box-rival {
        /*transform-origin: 100% 50%;*/
        right: 60px;top: 20px;
        transform:rotate(180deg);
    }
    .avatar-me, .avatar-rival{
        position: absolute;top: 50px;
        width: 126px;height: 126px;
    }
    .avatar-me {left: 5px;}
    .avatar-rival {
        right: 5px;
        transform: rotateY(180deg);
    }
    </style>
  </head>
  <body>
 
    <a href="#" class="attack">attack</a>
    <a href="#" class="defense">defense</a>
    <a href="#" class="left">left</a>
    <a href="#" class="right">right</a>
    <a href="#" class="static">static</a>
    <div class="blood-box-me">
        <div class="blood-box"></div>
        <img src="/images/blood-green.png" alt="">
    </div>
    <div class="blood-box-rival">
        <div class="blood-box"></div>
        <img src="/images/blood-green.png" alt="">
    </div>
    <div class="avatar-me">
        <img src="/images/avatar.png" alt="">
    </div>
    <div class="avatar-rival">
        <img src="/images/avatar.png" alt="">
    </div>
    <div id="gamer-container"></div>
   <script>
    var PPKD = function($, Hilo){
        var app = {
            container: $('#gamer-container'),
            rival: {
                width: 4300,
                height: 1830,
                frameWidth: 430,
                frameHeight: 610,
                numFrames: 30,
                blood: 100,
                sprites: {
                    static: {from: 0, to: 9},
                    attack: {from: 12, to: 16},
                    defense: {from: 23, to: 26}
                }
            },
            me: {
                width: 9000,
                height: 3240,
                frameWidth: 900,
                frameHeight: 1080,
                numFrames: 30,
                blood: 100,
                sprites: {
                    static: {from: 0, to: 9},
                    attack: {from: 12, to: 16},
                    defense: {from: 23, to: 26}
                }
            },
            init: function(obj){
                var self = this;
                // 舞台容器初始化
                self.container.height($(window).height());
                self.width = self.container.width();
                self.height = self.container.height();
                self.stage = self.createStage();
                self.ticker = self.createTicker(15);


                // 加入角色
                var rival = self.rival;
                rival.img = obj.rival.img;
                rival.coordX = (self.width-rival.frameWidth)/2;
                rival.coordY = 0;
                rival.textureAtlas = self.createTextureAtlas(rival);
                rival.sprite = self.createSprite(rival);

                var me = self.me;
                me.img = obj.me.img;
                me.coordX = (self.width-me.frameWidth)/2;
                me.coordY = -200;
                me.textureAtlas = self.createTextureAtlas(me);
                me.sprite = self.createSprite(me);

                rival.sprite.addTo(self.stage);
                me.sprite.addTo(self.stage);


                //暴露函数
                return {

                    action: function out(role, state){
                            var player;
                            if (role === 'rival')
                                player = self.rival;
                            if (role === 'me')
                                player = self.me;

                            var sprite = player.sprite;
                            switch(state){
                                case 'attack': sprite.goto(player.sprites.attack.from);break;
                                case 'defense': sprite.goto(player.sprites.defense.from);break;
                                case 'static': sprite.goto(player.sprites.static.from);break;
                                case 'moveLeft': out(role, 'static');self.move(sprite, 'left', function(){self.move(sprite, 'right')});break;
                                case 'moveRight': out(role, 'static');self.move(sprite, 'right', function(){self.move(sprite, 'left')});break;
                            }
                    },

                    updateBlood: function(role, blood){
                        var player;
                        if (role === 'rival')
                            player = self.rival;
                        if (role === 'me')
                            player = self.me;
                        player.blood = 100 - blood;
                    }                    

                }
            },
            updateBlood: function(){
                var self = this;
                var rivalB = self.rival.blood,
                    meB = self.me.blood;
                var rival = $('.blood-box-rival img'),
                    me = $('.blood-box-me img')

                rival.css('left', (self.rival.blood-100)+'%');
                me.css('left', (self.me.blood-100)+'%')

                window.setTimeout(function(){
                    if (rivalB < 30){
                        rival.attr('src', 'blood-red.png');
                    }
                    if (meB < 30){
                        me.attr('src', 'blood-red.png');
                    }                    
                }, 200)

            },
            move: function(sprite, dir, cb){
                var self = this;
                var current = 0, total = 5;
                var handle;
                var L = 400;
                if (dir === 'left'){
                    var L = -L;
                }           
                var originX = sprite.x;

                function draw(){
                    var progress = current / total;
                    if (progress>1){
                        window.cancelAnimationFrame(handle);
                        window.setTimeout(function(){
                            cb && cb();
                        }, 400);
                        return;
                    }
                    sprite.x = originX + L*progress;
                    current++;
                    handle = window.requestAnimationFrame(draw);
                }
                draw();
            },
            createStage: function(){
                var self = this;

                return new Hilo.Stage({
                    container: self.container[0], //不接受jq对象
                    width: self.width,
                    height: self.height
                })
            },
            createTicker: function(frames){
                var self = this;
                var ticker = new Hilo.Ticker(frames);
                ticker.addTick(self.stage);
                ticker.start();
                return ticker;
            },
            createTextureAtlas: function(obj){

                return new Hilo.TextureAtlas({
                    image: obj.img,
                    width: obj.width,
                    height: obj.height,
                    frames: {
                        frameWidth: obj.frameWidth,
                        frameHeight: obj.frameHeight,
                        numFrames: obj.numFrames
                    },
                    sprites: {
                        sprite: {from:0,to:obj.numFrames-1}
                    }
                })
            },
            createSprite: function(obj, name){
                var self = this;
                var dif = 10;
                var begin = obj.sprites.static.from;
                return new Hilo.Sprite({
                    frames: obj.textureAtlas.getSprite('sprite'),
                    x: obj.coordX,
                    y: obj.coordY,
                    interval: 1,
                    timeBased: false,
                    loop: true
                }).setFrameCallback(obj.sprites.attack.to+1, function(){
                    //攻击动画
                    self.updateBlood()
                    this.goto(begin);
                }).setFrameCallback(obj.sprites.defense.to+1, function(){
                    //防御动画
                    self.updateBlood()
                    this.goto(begin);
                }).setFrameCallback(obj.sprites.static.to+1,function(){
                    //无动作 动画
                    // self.updateBlood()
                    this.goto(begin)
                }).setFrameCallback(26, function(){
                    //一直防御
                    self.updateBlood()
                    this.stop();
                });

            }
        };
        return app;
    }(jQuery, Hilo);

console.log(PPKD)
        var PPKD = PPKD.init({
            rival:{
                img: './rival.png'
            },
            me : {
                img: './me.png'
            } 
        })
 console.log(PPKD)  

        jQuery('.defense').click(function(){
            PPKD.action('rival', 'attack');
            PPKD.action('me', 'defense')
        });
        jQuery('.attack').click(function(){
            PPKD.action('rival', 'defense')
            PPKD.action('me', 'attack')
            PPKD.updateBlood('me', 20)
        })
        jQuery('.static').click(function(){
            PPKD.action('rival', 'static')
        })
        jQuery('.left').click(function(){
            PPKD.action('rival', 'moveLeft');
        })
        jQuery('.right').click(function(){
            PPKD.action('rival', 'moveRight');
        })

    </script>
  </body>
</html>